"""
Django settings for movierater project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

import environ


# Initialise environment variables
env = environ.Env(
    # Set default values
    DEBUG=(bool, True),
    SECRET_KEY=(str, 'django-insecure-default-key-please-change-in-production'),
)
# Read .env file explicitly
env_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env')
if os.path.exists(env_file):
    environ.Env.read_env(env_file)

# In development, ignore system DATABASE_URL to use local sqlite
if env.bool("DEBUG", default=True) and "DATABASE_URL" in os.environ:
    # Remove DATABASE_URL from environment if we're in DEBUG mode
    # This allows local development with sqlite3
    del os.environ["DATABASE_URL"]

import dj_database_url

# Toggle DEBUG via environment, default to True for local development
DEBUG = env.bool("DEBUG", default=True)
print("Running in development mode" if DEBUG else "Running in production mode")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')


ALLOWED_HOSTS = [
    '*',  # Allow all hosts in development - restrict in production!
] if DEBUG else [
    '.localhost',
    '127.0.0.1',
    'ddeveloper72-movie-rater-api.herokuapp.com'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'storages',
    'api',  # apps
    'home',  # apps
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'movierater.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.media',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'movierater.wsgi.application'

LOGIN_REDIRECT_URL = '/admin/'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# Check if Azure SQL Database credentials are provided
azure_sql_host = env("AZURE_SQL_HOST", default=None)

if azure_sql_host:
    # Detect if running on Heroku (uses FreeTDS) vs local Windows (uses ODBC Driver 18)
    import platform
    is_heroku = os.environ.get('DYNO') is not None  # Heroku sets DYNO env var
    
    if is_heroku:
        # Use FreeTDS driver on Heroku
        driver = 'FreeTDS'
        extra_params = 'TDS_Version=8.0;'
    else:
        # Use ODBC Driver 18 on Windows
        driver = 'ODBC Driver 18 for SQL Server'
        extra_params = 'Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'
    
    # Use Azure SQL Database
    DATABASES = {
        'default': {
            'ENGINE': 'mssql',
            'NAME': env('AZURE_SQL_NAME'),
            'USER': env('AZURE_SQL_USER'),
            'PASSWORD': env('AZURE_SQL_PASSWORD'),
            'HOST': azure_sql_host,
            'PORT': env('AZURE_SQL_PORT', default='1433'),
            'OPTIONS': {
                'driver': driver,
                'extra_params': extra_params
            },
        }
    }
    print(f"Using Azure SQL Database: {env('AZURE_SQL_NAME')} on {azure_sql_host} (driver: {driver})")
elif DEBUG:
    # Development mode - use sqlite3
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    print("Using local sqlite3 for development")
else:
    # Production mode without database - error
    raise ValueError("Production mode requires database credentials (AZURE_SQL_HOST, etc.)")

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# django-cors-headers >= 4 uses CORS_ALLOWED_ORIGINS (list)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:4200',
    'http://localhost:3000',
    'https://angular-movie-rater.web.app',
    'https://angular-movie-rater.firebaseapp.com',
]

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
)


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type (Django 3.2+)
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# AWS S3 bucket parameters for production

if DEBUG:
    STATIC_URL = '/static/'

    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),
    )

    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    )

    # Local media served from filesystem in development
    MEDIA_URL = '/img/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    # Production static files served by WhiteNoise (no AWS S3 needed)
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),
    )
    
    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    )
    
    # WhiteNoise storage with compression and caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # Media files (if using AWS S3 for media uploads, keep these)
    # Otherwise, serve media files locally or disable
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    
    # AWS S3 configuration (optional - only needed for media file uploads)
    # If you don't need S3 for media, you can remove these
    # AWS_S3_OBJECT_PARAMETERS = {
    #     'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
    #     'CacheControl': 'max-age=94608000',
    # }
    # AWS_LOCATION = 'media'
    # AWS_S3_REGION_NAME = 'eu-west-1'
    # AWS_STORAGE_BUCKET_NAME = 'movie-rater'
    # AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    # AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    # AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    # AWS_DEFAULT_ACL = None
    # DEFAULT_FILE_STORAGE = 'storage_backends.MediaStorage'
